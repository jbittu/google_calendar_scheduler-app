datasource db { provider = "postgresql"; url = env("DATABASE_URL") }
generator client { provider = "prisma-client-js" }

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  role          Role     @default(BUYER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  seller        Seller?
  credentials   OAuthCredential?
  accounts      Account[]
  sessions      Session[]
  bookingsBuyer Booking[] @relation("BuyerBookings")
  bookingsSeller Booking[] @relation("SellerBookings")
}

model Seller {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  timezone      String   @default("Asia/Kolkata")
  slotDurationM Int      @default(30)
  bufferBeforeM Int      @default(0)
  bufferAfterM  Int      @default(0)
  isPublic      Boolean  @default(true)
  displayName   String?
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OAuthCredential {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  provider        String   // "google"
  accessToken     String?  // short-lived
  refreshTokenEnc String   // encrypted at rest
  accessTokenExp  DateTime?
  scope           String?
  tokenType       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Booking {
  id                 String   @id @default(cuid())
  sellerId           String
  seller             User     @relation("SellerBookings", fields: [sellerId], references: [id])
  buyerId            String
  buyer              User     @relation("BuyerBookings", fields: [buyerId], references: [id])
  start              DateTime
  end                DateTime
  meetLink           String?
  googleEventIdSeller String?
  googleEventIdBuyer  String?
  summary            String   @default("Appointment")
  description        String?
  location           String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([sellerId, start, end])
  @@index([buyerId, start, end])
}

enum Role {
  BUYER
  SELLER
}

//
// NextAuth required models
//
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
